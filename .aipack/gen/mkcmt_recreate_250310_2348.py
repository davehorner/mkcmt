#!/usr/bin/env python3
import os
import sys
import subprocess

def copy_to_clipboard(text):
    """
    Copies the given text to the system clipboard.
    Uses 'clip' on Windows and 'pbcopy' on macOS.
    """
    try:
        if sys.platform.startswith('win'):
            proc = subprocess.Popen(['clip'], stdin=subprocess.PIPE, close_fds=True)
            proc.communicate(input=text.encode('utf-8'))
        elif sys.platform == 'darwin':
            proc = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE, close_fds=True)
            proc.communicate(input=text.encode('utf-8'))
        else:
            print('[TRACE] Clipboard copy not supported on this platform.')
    except Exception as e:
        print(f'[ERROR] Failed to copy to clipboard: {e}')

def copy_self_to_clipboard():
    """
    Reads its own source file and copies the content to the clipboard.
    Provides detailed tracing for debugging.
    """
    try:
        with open(__file__, 'r', encoding='utf-8') as f:
            content = f.read()
        copy_to_clipboard(content)
        print('[TRACE] The script has been copied to the clipboard.')
    except Exception as e:
        print(f'[ERROR] Failed to copy self to clipboard: {e}')

def create_crate():
    """
    Recreates the directory structure and files for the crate.
    Provides detailed tracing for each step.
    """
    base_folder = os.path.join(os.getcwd(), 'mkcmt')
    print(f'[TRACE] Creating base folder: {base_folder}')
    os.makedirs(base_folder, exist_ok=True)
    files = {
        'Cargo.toml': '[package]\nname = "mkcmt"\nversion = "0.1.0"\nedition = "2024"\n\n[dependencies]\nclipboard = "0.5.0"\ngenai = "0.1.23"\ntokio = "1.44.0"\n',  # File: Cargo.toml
        'output_cc_prompts.txt': '\n----------------------\nBased on the diff provided, here\'s an improved prompt for generating a conventional commit message that adheres to the Conventional Commits specification:\n\n---\n\n**Prompt for generating conventional commit message:**\n\n"Please create a conventional commit message based on the following changes in the files. Specifically, summarize the modifications made to each file, mention if it\'s a new addition, and include references to changed files as per Conventional Commits specifications. Here are the changes:\n\n1. **Files Added:**\n   - `.gitignore`: Added a new rule to ignore the \'target/\' directory.\n   - `Cargo.lock`: New lock file generated for dependencies.\n   - `Cargo.toml`: Created a new package definition and added dependencies for \'clipboard\', \'genai\', and \'tokio\'.\n   - `src/main.rs`: Implemented the main functionality to interact with clipboard and integrate with the genai chat client.\n\nPlease format the message in the conventional commits style."\n\n---\n\nThis prompt gives clear specifications and highlights the changes, ensuring the commit message generated is informative and relevant to the modifications made.\n\n\n----------------------\nHere\'s an improved prompt that focuses on generating a more structured and clear conventional commit message while following the Conventional Commits specifications:\n\n---\n\n**Prompt for Generating a Conventional Commit Message:**\n\n"Based on the following changes made to the codebase, please generate a concise and informative conventional commit message. Ensure that the message adheres to the Conventional Commits specification format, including the type of change (e.g., feat, fix), a brief description, and references to affected files as necessary. Here are the details of the modifications:\n\n1. **Type of Changes:**\n   - New Features: \n     - Introduced a new package definition in `Cargo.toml`, adding dependencies for \'clipboard\', \'genai\', and \'tokio\'.\n     - Implemented functionality in `src/main.rs` to interact with the clipboard and integrate with the genai chat client.\n   - Configuration:\n     - Updated `.gitignore` to include the \'target/\' directory to optimize version control.\n     - Generated a new `Cargo.lock` file for managing project dependencies.\n\n2. **Expected Format:**\n   - Begin with the change type (`feat`, `fix`, etc.), followed by a colon, and then a succinct description of what was accomplished.\n   - Optionally, include references to the files that were changed, if relevant.\n\nUse this information to craft a well-structured commit message."\n\n---\n\nThis enhanced prompt provides clear guidance on the type of changes and formatting expectations, leading to a better conventional commit message.\n\n\n----------------------\nCertainly! Hereâ€™s an enhanced prompt that provides clear instructions for generating a conventional commit message according to the Conventional Commits specifications:\n\n---\n\n**Enhanced Prompt for Generating a Conventional Commit Message:**\n\n"Using the changes outlined below, create a structured and informative conventional commit message that complies with the Conventional Commits specification. Be sure to identify the type of change (e.g., feat, fix), provide a clear and concise description of the changes, and mention any relevant files affected by the commit.\n\n### Changes Summary:\n\n1. **New Features:**\n   - Added a new package definition in `Cargo.toml`, incorporating dependencies for \'clipboard\', \'genai\', and \'tokio\'.\n   - Implemented functionality in `src/main.rs` for clipboard interactions and integration with the genai chat client.\n\n2. **Configuration Updates:**\n   - Modified `.gitignore` to include \'target/\' directory to refine version control practices.\n   - Created a new `Cargo.lock` file for improved dependency management.\n\n### Expected Commit Message Format:\n- Start with a change type: `feat`, `fix`, or other relevant types.\n- Follow with a concise description, starting with an imperative verb (e.g., "add", "update").\n- Optionally, include the affected files in parentheses for clarity.\n\nUse this guidance to draft a commit message that is clear, concise, and adheres to the Conventional Commits standard."\n\n---\n\nThis version offers structured guidance, emphasizing clarity and adherence to specified formats, facilitating the creation of a high-quality conventional commit message.\n\n\n----------------------\nHere\'s an improved prompt designed to help generate a clear and effective conventional commit message:\n\n---\n\n**Prompt for Generating a Conventional Commit Message:**\n\n"Based on the following changes, please construct a clear and structured conventional commit message that aligns with the Conventional Commits specification. Ensure to identify the type of change, provide a succinct description, and mention any relevant files affected by the commit.\n\n### Summary of Changes:\n\n1. **New Features:**\n   - Introduced a new package definition in `Cargo.toml`, including dependencies for \'clipboard\', \'genai\', and \'tokio\'.\n   - Added functionality in `src/main.rs` to handle clipboard interactions and integrate with the genai chat client.\n\n2. **Configuration Updates:**\n   - Updated `.gitignore` to include the \'target/\' directory for better version control.\n   - Generated a new `Cargo.lock` file to manage dependencies more effectively.\n\n### Guidelines for Commit Message:\n\n- Start with the type of change (e.g., `feat`, `fix`, `chore`, etc.).\n- Follow this with a brief description of what was accomplished in the change, using an imperative verb (e.g., "add", "update").\n- If applicable, mention the affected files in parentheses for better context.\n\nUsing this framework, please draft a conventional commit message that is informative, concise, and clear."\n\n---\n\nThis prompt emphasizes structured guidance and clarity, making it easier to generate a high-quality conventional commit message.\n\n\n----------------------\nHere\'s an improved version of your prompt to generate a clear and effective conventional commit message while aligning with the Conventional Commits specification:\n\n---\n\n**Prompt for Generating a Conventional Commit Message:**\n\n"Please create a clear and structured conventional commit message based on the following changes. Make sure to identify the type of change, offer a concise description, and if relevant, include affected files in parentheses. \n\n### Summary of Changes:\n\n1. **New Features:**\n   - Introduced a new package definition in `Cargo.toml` with new dependencies: \'clipboard\', \'genai\', and \'tokio\'.\n   - Enhanced functionality in `src/main.rs` to manage clipboard interactions and integrate with the genai chat client.\n\n2. **Configuration Updates:**\n   - Updated `.gitignore` to exclude the \'target/\' directory, improving version control practices.\n   - Generated a new `Cargo.lock` file to properly manage dependencies.\n\n### Guidelines for Commit Message:\n\n- Start with a commit type (e.g., `feat`, `fix`, `chore`, etc.).\n- Follow it with a short, imperative description of the changes made.\n- Optionally, mention affected files in parentheses for additional context.\n\nUsing this structured approach, please draft a conventional commit message that is informative, concise, and follows the Conventional Commits specification."\n\n---\n\nThis improved prompt maintains clarity while emphasizing structured guidance, making it easier to produce a high-quality conventional commit message.\n\n',  # File: output_cc_prompts.txt
        'output_cc_suggestions.txt': 'feat: add initial, including Git diff handling/progressive prompting for commit message generation.\n\n- Implemented clipboard interaction and genai chat client integration in src/main.rs.\n- Added .gitignore to exclude target/ directory\n- Created new Cargo.lock for dependency management\n- Defined package in Cargo.toml and added clipboard, genai, and tokio dependencies\n- Implemented main interaction logic in src/main.rs for clipboard and genai chat integration\n',  # File: output_cc_suggestions.txt
        'README.md': '\n# Rust GenAI-Powered Conventional Commit Generator\n\n## Overview\n\nThis tool generates concise or lengthy, Conventional Commit-compatible commit messages using GPT-4o-mini (ChatGPT), based on your Git diff outputs. It intelligently handles both staged and unstaged changes, progressively refining commit suggestions based on user feedback, and can copy the final commit message directly to your clipboard.\n\n## Features\n\n- **Intelligent Commit Message Generation:** Leverages AI to analyze Git diffs and generate clear, descriptive commit messages.\n- **Interactive Refinement:** If the initial suggestion isn\'t suitable, the tool progressively refines the prompt to generate better commit messages.\n- **Clipboard Integration:** Offers the convenience of copying commit messages directly to the clipboard.\n- **Detailed Logging:** Maintains logs of both generated commit messages and refined prompts for easy reference.\n\n## Installation\n\n### Prerequisites\n\n- Rust and Cargo installed\n- Access to the GPT-4o-mini model (requires an OpenAI API key)\n\n### Setup\n\n1. Clone the repository:\n\n```sh\ngit clone https://github.com/davehorner/mkcmt.git\ncd mkcmt\ncargo install --path .\n```\n\n\n2. **Set API Key**\n\nSet your OpenAI API key in the environment variable:\n\n```bash\nexport OPENAI_API_KEY="your-api-key-here"\n```\n\n\n## Usage\n\nrun mkcmt in a git folder with some changes.  follow the prompts.\n\n\n### Workflow:\n\n- The tool checks for both staged (`git diff --cached`) and unstaged (`git diff`) changes.\n- Prompts whether to combine staged and unstaged changes if both exist.\n- Queries ChatGPT for a suitable commit message based on the provided diff.\n- Presents the commit message and prompts for acceptance.\n  - If accepted, optionally copies it to the clipboard.\n  - If declined, GPT is used iteratively to refine the prompt until an acceptable commit message is produced.\n\n## Output Logs\n\nThe tool maintains two log files for transparency and auditing purposes: \n   \n- `cc` stands for conventional commit\n\n- `output_cc_suggestions.txt`\n  - Logs each generated commit message, clearly separated.\n\n- `output_cc_prompts.txt`\n  - Logs each refined prompt used for subsequent message generation.\n\nThe logs are continually appended with clear separators, facilitating easy review and continuous improvement.\n\n## Requirements\n\n- Rust\n- OPENAI_API_KEY key for GPT-4o-mini accessible via your environment.\n- git must be installed and accessible via command line.\n\n\n## Example\n\n```\n$ cargo run\nBoth staged and unstaged changes detected.\nInclude both staged and unstaged changes in commit message? (y/n): y\n\nQuerying ChatGPT for commit message...\n\nSuggested commit message:\nfeat: implement interactive AI-powered commit message generation tool\n\nAccept this commit message? (y/n): n\nRefining prompt for a better commit message...\n\nQuerying ChatGPT again with refined prompt...\n\nSuggested commit message:\nfeat: add interactive refinement for better commit message accuracy based on user feedback\n\nAccept this commit message? (y/n): y\n\nCopy commit message to clipboard? (y/n): y\nCommit message copied to clipboard.\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n',  # File: README.md
        'src/main.rs': 'use std::fs::OpenOptions;\nuse std::io::{self, Write};\nuse std::process::Command;\nuse genai::chat::{ChatMessage, ChatRequest};\nuse genai::Client;\nuse clipboard::{ClipboardContext, ClipboardProvider};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let staged_diff_text = run_git_diff("--cached")?;\n    let unstaged_diff_text = run_git_diff("")?;\n\n    let diff_text = if staged_diff_text.is_empty() {\n        if unstaged_diff_text.is_empty() {\n            println!("No staged or unstaged changes detected. Exiting.");\n            return Ok(());\n        }\n        unstaged_diff_text\n    } else if !unstaged_diff_text.is_empty() {\n        println!("Both staged and unstaged changes detected.");\n        if confirm_user_input("Include both staged and unstaged changes in commit message? (y/n): ")? {\n            format!("{}\\n{}", staged_diff_text, unstaged_diff_text)\n        } else {\n            staged_diff_text\n        }\n    } else {\n        staged_diff_text\n    };\n\n    let original_diff_text = diff_text.clone();\n\n    let mut prompt = format!(\n        "Generate a conventional commit message referencing changed files:\\n\\n<GIT_DIFF>",\n    );\n\n    let model = "gpt-4o-mini";\n    let client = Client::default();\n\n    loop {\n        let actual_prompt = prompt.replace("<GIT_DIFF>", &original_diff_text);\n\n        let chat_req = ChatRequest::new(vec![\n            ChatMessage::system("Provide a concise conventional commit message without markdown formatting."),\n            ChatMessage::user(&actual_prompt),\n        ]);\n\n        println!("\\nQuerying ChatGPT for commit message...");\n        let chat_res = client.exec_chat(model, chat_req, None).await?;\n        let commit_message = chat_res.content_text_as_str().unwrap_or("No response.").replace(\'`\', "");\n\n        log_output("output_cc_suggestions.txt", &commit_message)?;\n\n        println!("\\nSuggested commit message:\\n{}", commit_message);\n\n        if confirm_user_input("\\nAccept this commit message? (y/n): ")? {\n            if confirm_user_input("\\nCopy commit message to clipboard? (y/n): ")? {\n                let mut clipboard: ClipboardContext = ClipboardProvider::new()?;\n                clipboard.set_contents(commit_message.to_owned())?;\n                println!("Commit message copied to clipboard.");\n            } else {\n                println!("Commit message not copied.");\n            }\n            break;\n        } else {\n            println!("Refining prompt for a better commit message...");\n            let refinement_req = ChatRequest::new(vec![\n                ChatMessage::system("Suggest an improved prompt to obtain a better conventional commit message following conventional commit specifications."),\n                ChatMessage::user(&actual_prompt),\n            ]);\n\n            let refinement_res = client.exec_chat(model, refinement_req, None).await?;\n            let refined_prompt_template = refinement_res.content_text_as_str().unwrap_or(&prompt).replace("<GIT_DIFF>", &original_diff_text);\n\n            log_output("output_cc_prompts.txt", &refined_prompt_template)?;\n\n            prompt = refinement_res.content_text_as_str().unwrap_or(&prompt).to_string();\n\n            println!("\\nRefined prompt used:\\n{}", prompt);\n        }\n    }\n\n    Ok(())\n}\n\nfn run_git_diff(args: &str) -> Result<String, Box<dyn std::error::Error>> {\n    let args_vec: Vec<&str> = if args.is_empty() {\n        vec!["diff"]\n    } else {\n        vec!["diff", args]\n    };\n    let output = Command::new("git").args(&args_vec).output()?;\n    Ok(String::from_utf8_lossy(&output.stdout).trim().to_string())\n}\n\nfn confirm_user_input(prompt: &str) -> Result<bool, Box<dyn std::error::Error>> {\n    print!("{}", prompt);\n    io::stdout().flush()?;\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n    Ok(input.trim().eq_ignore_ascii_case("y"))\n}\n\nfn log_output(filename: &str, content: &str) -> Result<(), Box<dyn std::error::Error>> {\n    let mut file = OpenOptions::new().create(true).append(true).open(filename)?;\n    writeln!(file, "\\n----------------------\\n{}\\n", content)?;\n    Ok(())\n}\n\n',  # File: src/main.rs
    }

    for relative_path, content in files.items():
        full_path = os.path.join(base_folder, relative_path)
        directory = os.path.dirname(full_path)
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f'[TRACE] Created directory: {directory}')
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f'[TRACE] Created file: {full_path}')

if __name__ == '__main__':
    create_crate()
    # Uncomment the next line to enable self-copy functionality.
    # copy_self_to_clipboard()
    print('[TRACE] Crate creation complete.')